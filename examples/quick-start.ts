import { TronScanSDK } from '../src/index';

// Âø´ÈÄüÂºÄÂßãÁ§∫‰æã
async function quickStart() {
  // 1. ÂàùÂßãÂåñ SDK
  const sdk = new TronScanSDK({
    apikey: ''
  });

  console.log('üöÄ TronScan SDK Âø´ÈÄüÂºÄÂßã\n');

  try {
    // 2. Êü•ËØ¢Ë¥¶Êà∑‰ΩôÈ¢ù
    console.log('üí∞ Êü•ËØ¢Ë¥¶Êà∑‰ΩôÈ¢ù');
    const address = '‰Ω†ÈúÄË¶ÅÊü•ËØ¢ÁöÑÂú∞ÂùÄ';
    const account = await sdk.getAccountDetail(address);
    
    console.log(`Âú∞ÂùÄ: ${TronScanSDK.formatAddress(address)}`);
    console.log(`TRX ‰ΩôÈ¢ù: ${TronScanSDK.sunToTrx(account.balance || 0)} TRX`);
    console.log(`Â∏¶ÂÆΩ: ${account.bandwidth || 0}`);
    console.log('');

    // 3. Êü•ËØ¢ÊúÄÊñ∞Âå∫Âùó
    console.log('üì¶ ÊúÄÊñ∞Âå∫Âùó‰ø°ÊÅØ');
    const blocks = await sdk.getBlockList({ start: 0, limit: 1 });
    if (blocks.data && blocks.data.length > 0) {
      const block = blocks.data[0];
      console.log(`ÊúÄÊñ∞Âå∫Âùó: #${block.number}`);
      console.log(`Âå∫ÂùóÂìàÂ∏å: ${TronScanSDK.formatAddress(block.hash || '')}`);
      console.log(`‰∫§ÊòìÊï∞: ${block.nrOfTrx || 0}`);
      console.log(`Êó∂Èó¥: ${TronScanSDK.formatTimestamp(block.timestamp || 0).toLocaleString()}`);
    }
    console.log('');

    // 4. Êü•ËØ¢‰ª£Â∏Å‰ø°ÊÅØ
    console.log('ü™ô Êü•ËØ¢ USDT ÂêàÁ∫¶‰ø°ÊÅØ');
    const usdtAddress = 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t';
    const contractDetail = await sdk.getContractDetail(usdtAddress);
    
    if (contractDetail.data && contractDetail.data.length > 0) {
      const contract = contractDetail.data[0];
      console.log(`ÂêàÁ∫¶Âú∞ÂùÄ: ${TronScanSDK.formatAddress(contract.address)}`);
      console.log(`‰ª£Â∏ÅÂêçÁß∞: ${contract.tokenInfo?.tokenName || 'N/A'}`);
      console.log(`‰ª£Â∏ÅÁ¨¶Âè∑: ${contract.tokenInfo?.tokenAbbr || 'N/A'}`);
      console.log(`È™åËØÅÁä∂ÊÄÅ: ${contract.verify_status === 2 ? 'Â∑≤È™åËØÅ' : 'Êú™È™åËØÅ'}`);
    }
    console.log('');

    // 5. Êü•ËØ¢ÊúÄÊñ∞‰∫§Êòì
    console.log('üìã ÊúÄÊñ∞‰∫§Êòì');
    const transactions = await sdk.getTransactionList({ start: 0, limit: 3 });
    if (transactions.data && transactions.data.length > 0) {
      transactions.data.forEach((tx, index) => {
        console.log(`${index + 1}. ‰∫§ÊòìÂìàÂ∏å: ${TronScanSDK.formatAddress(tx.hash || '')}`);
        console.log(`   Âå∫Âùó: #${tx.block || 0}`);
        console.log(`   ÂèëËµ∑ËÄÖ: ${TronScanSDK.formatAddress(tx.ownerAddress || '')}`);
        console.log(`   Êó∂Èó¥: ${TronScanSDK.formatTimestamp(tx.timestamp || 0).toLocaleString()}`);
        console.log('');
      });
    }

    console.log('‚úÖ Âø´ÈÄüÂºÄÂßãÁ§∫‰æãÂÆåÊàêÔºÅ');

  } catch (error) {
    console.error('‚ùå ÂèëÁîüÈîôËØØ:', error);
  }
}

// Âú∞ÂùÄÈ™åËØÅÁ§∫‰æã
function addressValidation() {
  console.log('üîç Âú∞ÂùÄÈ™åËØÅÁ§∫‰æã');
  
  const testAddresses = [
    'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t', // USDT ÂêàÁ∫¶Âú∞ÂùÄ
    'TLa2f6VPqDgRE67v1736s7bJ8Ray5wYjU7', // ÊôÆÈÄöË¥¶Êà∑Âú∞ÂùÄ
    'invalid_address',                        // Êó†ÊïàÂú∞ÂùÄ
    'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj'     // ÈïøÂ∫¶‰∏çË∂≥
  ];

  testAddresses.forEach(address => {
    const isValid = TronScanSDK.isValidTronAddress(address);
    console.log(`${address}: ${isValid ? '‚úÖ ÊúâÊïà' : '‚ùå Êó†Êïà'}`);
  });
  console.log('');
}

// Âçï‰ΩçËΩ¨Êç¢Á§∫‰æã
function unitConversion() {
  console.log('üîÑ Âçï‰ΩçËΩ¨Êç¢Á§∫‰æã');
  
  const examples = [
    { sun: 1000000, description: '1 TRX' },
    { sun: 1000000000, description: '1,000 TRX' },
    { sun: 1000000000000, description: '1,000,000 TRX' }
  ];

  examples.forEach(({ sun, description }) => {
    const trx = TronScanSDK.sunToTrx(sun);
    const backToSun = TronScanSDK.trxToSun(trx);
    console.log(`${sun.toLocaleString()} Sun = ${trx.toLocaleString()} TRX (${description})`);
    console.log(`ÂèçËΩ¨: ${trx} TRX = ${backToSun.toLocaleString()} Sun`);
    console.log('');
  });
}

// ËøêË°åÁ§∫‰æã
async function main() {
  await quickStart();
  addressValidation();
  unitConversion();
}

if (require.main === module) {
  main().catch(console.error);
}

export { quickStart, addressValidation, unitConversion }; 